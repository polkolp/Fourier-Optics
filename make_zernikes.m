function [zernikes, nm, norm] = make_zernikes(N, M, order)%% [zernikes, nm, norm] = make_zernikes(N, M, order)% Makes zernike polynomials of diameter M pixels%  embedded in square arrays of length N pixels%  of Zernike polynomials specified by the vector order% By Tim Schulz 10/2002;%	Matlab function to make the radial polynomials of Zernike%	at the orders specified in 'order'.  The polynomials will be%	stored in arrays of size NxN, defined on a radius 1 circle %	of maximum dimension MxM.  The polynomials are created%	according to Noll's [1] ordering, and the (n,m) indices are%	returned in the array 'nm':%%		nm(i,1) stores the value for n at index i%		nm(i,2) stores the value for m at index i%%       The integral over the radial support for each polynomial is%	returned in the variable 'norm'.  The output variables are %	summarized below:%%		zernikes:	N x N x max_order array containing the%				Zernike polynomials%		nm:		max_order x 2 array containing the%				(n,m) indices as defined by Noll [1].%		norm:		scalar value containing the integral%				over the radial support for the %				polynomials%%	[1] R.J. Noll, "Zernike polynomials and atmospheric%	    turbulence," J. Opt. Soc. Am., vol. 66, pp. 207-211, %	    1976.%max_order = max(order);zernikes = zeros(N, N, length(order));[n1,n2]  = meshgrid([-N/2:1:N/2-1]);mask     = n1.^2 + n2.^2 <= (M/2)^2;x1       = 2*n1/M;x2       = 2*n2/M;r        = sqrt(x1.^2 + x2.^2);theta    = atan2(x2,x1);delta    = 2/M;norm     = sum(sum(mask));nm = zeros(max_order,2);i  = 1;for n=0:100  for m=mod(n,2):2:n    if ((m==0)&(sum(order==i)==0) ) | ...	   ((m~=0)&(sum(order==i)==0)&(sum(order==i+1)==0))      if m == 0	i = i+1;      else	i = i+2;      end    else      ii = find(order==i);      R_nm = zeros(N,N);      for s=0:1:(n-m)/2        R_nm = R_nm + ...               ( (-1)^s * gamma(n-s+1) ) / ...               ( gamma(s+1)*gamma((n+m)/2-s+1)*gamma((n-m)/2-s+1) ) ...               * r.^(n-2*s);      end      R_nm = R_nm.*mask;      if m == 0        zernikes(:,:,ii) = sqrt(n+1)*R_nm;        nm(i,1) = n;        nm(i,2) = m;        if (i == max_order) return; end;        i = i + 1;      else        if mod(i,2) == 0          zernikes(:,:,ii) = sqrt(2*(n+1))*R_nm.*cos(m*theta);          nm(i,1) = n;          nm(i,2) = m;          if (i == max_order) return; end;	  i = i + 1;	  if (sum(order == i) == 1)	    ii = find(order == i);	    zernikes(:,:,ii) = sqrt(2*(n+1))*R_nm.*sin(m*theta);	    nm(i,1) = n;	    nm(i,2) = m;            if (i == max_order) return; end;	  end          i = i + 1;        else          zernikes(:,:,ii) = sqrt(2*(n+1))*R_nm.*sin(m*theta);          nm(i,1) = n;          nm(i,2) = m;          if (i == max_order) return; end;          i = i + 1;	  if (sum(order == i) == 1)	    ii = find(order == i);	    zernikes(:,:,ii) = sqrt(2*(n+1))*R_nm.*cos(m*theta);	    nm(i,1) = n;	    nm(i,2) = m;	    if (i == max_order) return; end;	  end          i = i + 1;        end      end    end  endend